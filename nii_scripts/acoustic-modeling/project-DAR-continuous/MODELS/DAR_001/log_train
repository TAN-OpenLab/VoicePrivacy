ver:2019/11/05
Configuration Infor:
	Training Mode: Started in hybrid online/batch
		Writting network  to 'trained_network.jsn'.
		WARNING: overwriting 'trained_network.jsn'
	Validation every 1 epochs.

	Training epoch number maximum: 50

	Training epoch number no lowest validation error: 5
	Utilizing the GPU on 10 sequences in parallel.

	Initialization method:
		Uniform dist. with layer-wise range

		Random seed: 1811626773

Using device #0 (Tesla K80)
Reading network from 'network.jsn'... done.

Loading training set '/home/smg/wang/WORK/WORK/TEMP/temp/project-CURRENNT-scripts/acoustic-modeling/project-DAR-continuous/DATATEMP/train/data.nc1' ...done.
Loaded fraction:  100%
Sequences:        1
Sequence lengths: 210..210
Total timesteps:  210

Loading validation set '/home/smg/wang/WORK/WORK/TEMP/temp/project-CURRENNT-scripts/acoustic-modeling/project-DAR-continuous/DATATEMP/val/data.nc1' ...done.
Loaded fraction:  100%
Sequences:        1
Sequence lengths: 428..428
Total timesteps:  428

Creating the neural network...
Layer (0) [ input ]  input 
Layer (1) [ exinput ]  externalloader 
	Trainable layer: initialize weight randomly
	Read MV from /home/smg/wang/WORK/WORK/TEMP/temp/project-CURRENNT-scripts/acoustic-modeling/project-DAR-continuous/DATATEMP/train/input_meanstd.bin
Layer (2) [ ARmodel_forward_1 ]  feedforward_logistic 
	Trainable layer: initialize weight randomly
Layer (3) [ ARmodel_forward_2 ]  feedforward_logistic 
	Trainable layer: initialize weight randomly
Layer (4) [ ARmodel_blstm_level_1 ]  blstm 
	Trainable layer: initialize weight randomly
Layer (5) [ feedback ]  feedback 
	Trainable layer: initialize weight randomly
Layer (6) [ feedback_ini ]  skipini 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): feedback,

Layer (7) [ feedback_modulate ]  skipcat 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): feedback_ini [256 336],

Layer (8) [ feedback_modulate-1 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 


Layer (9) [ feedback_modulate-2 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (10) [ feedback_modulate-3 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (11) [ ARmodel_feedback_ff_1 ]  feedforward_identity 
	Trainable layer: initialize weight randomly
Layer (12) [ ARmodel_feedback_ff_2 ]  feedforward_identity 
	Trainable layer: initialize weight randomly
Layer (13) [ feedback_end ]  skipcat 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): feedback_ini [0 256], ARmodel_feedback_ff_2 [0 80],

Layer (14) [ ARmodel_lstm_l1 ]  lstm 
	Trainable layer: initialize weight randomly
Layer (15) [ ARmodel_lstm_l2 ]  lstm 
	Trainable layer: initialize weight randomly
Layer (16) [ ARmodel_outputnew ]  feedforward_identity 
	Trainable layer: initialize weight randomly
Layer (17) [ ARmodel_s1 ]  skipini 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): ARmodel_outputnew,

Layer (18) [ ARmodel_s2 ]  skipadd 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): ARmodel_s1,

Layer (19) [ ARmodel_modulate_post1 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (20) [ ARmodel_modulate_post2 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (21) [ ARmodel_cnn1 ]  cnn 
	Trainable layer: initialize weight randomly
	CNN 1-D convolution
	CNN trainable weights: 32080 (weights in Network summary may be inaccurate)
	CNN winwidth:    80*2
	CNN winDilution: 80*1
	CNN winHeight:   
	CNN winStride:   

Layer (22) [ ARmodel_modulate_post3 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (23) [ ARmodel_modulate_post4 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (24) [ ARmodel_cnn2 ]  cnn 
	Trainable layer: initialize weight randomly
	CNN 1-D convolution
	CNN trainable weights: 32080 (weights in Network summary may be inaccurate)
	CNN winwidth:    80*2
	CNN winDilution: 80*1
	CNN winHeight:   
	CNN winStride:   

Layer (25) [ ARmodel_modulate_post5 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (26) [ ARmodel_modulate_post6 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (27) [ ARmodel_cnn3 ]  cnn 
	Trainable layer: initialize weight randomly
	CNN 1-D convolution
	CNN trainable weights: 32080 (weights in Network summary may be inaccurate)
	CNN winwidth:    80*2
	CNN winDilution: 80*1
	CNN winHeight:   
	CNN winStride:   

Layer (28) [ ARmodel_modulate_post7 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (29) [ ARmodel_modulate_post8 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (30) [ ARmodel_cnn4 ]  cnn 
	Trainable layer: initialize weight randomly
	CNN 1-D convolution
	CNN trainable weights: 32080 (weights in Network summary may be inaccurate)
	CNN winwidth:    80*2
	CNN winDilution: 80*1
	CNN winHeight:   
	CNN winStride:   

Layer (31) [ ARmodel_modulate_post9 ]  operator 
	Trainable layer: initialize weight randomly	Operator layer: 
	inject noise: dim 80, u[-1.000000, 1.000000]


Layer (32) [ ARmodel_modulate_post10 ]  gatedact 
	Trainable layer: initialize weight randomly
Layer (33) [ ARmodel_cnn5 ]  cnn 
	Trainable layer: initialize weight randomly
	CNN 1-D convolution
	CNN trainable weights: 32080 (weights in Network summary may be inaccurate)
	CNN without tanh output function
	CNN winwidth:    80*2
	CNN winDilution: 80*1
	CNN winHeight:   
	CNN winStride:   

Layer (34) [ ARmodel_s3 ]  skipadd 
	Trainable layer: initialize weight randomly
	Receive input from layer(s): ARmodel_cnn5, ARmodel_s2,

Layer (35) [ postoutput ]  sse_multi 
	Read MV from /home/smg/wang/WORK/WORK/TEMP/temp/project-CURRENNT-scripts/acoustic-modeling/project-DAR-continuous/DATATEMP/train/output_meanstd.bin
Creating the feedback link:
	Reading previous layer [0-256] dim
	From sse_multi [0-80]	Look Back []

Link for SsePostOutputMultiLayer: ARmodel_s1
Link for SsePostOutputMultiLayer: ARmodel_s3
Network construction done.

Network summary:
     Name		Type
(0) input		input [size: 1]
(1) exinput		externalloader [size: 2457, bias: 1.0, weights: 0]
(2) ARmodel_forward_1		feedforward_logistic [size: 512, bias: 1.0, weights: 1258496]
(3) ARmodel_forward_2		feedforward_logistic [size: 512, bias: 1.0, weights: 262656]
(4) ARmodel_blstm_level_1		blstm [size: 256, bias: 1.0, weights: 657152]
(5) feedback		feedback [size: 336, bias: 1.0, weights: 0]
(6) feedback_ini		skipini [size: 336, bias: 1.0, weights: 0]
(7) feedback_modulate		skipcat [size: 80, bias: 1.0, weights: 0]
(8) feedback_modulate-1		operator [size: 80, bias: 1.0, weights: 0]
(9) feedback_modulate-2		operator [size: 160, bias: 1.0, weights: 0]
(10) feedback_modulate-3		gatedact [size: 80, bias: 1.0, weights: 0]
(11) ARmodel_feedback_ff_1		feedforward_identity [size: 80, bias: 1.0, weights: 6480]
(12) ARmodel_feedback_ff_2		feedforward_identity [size: 80, bias: 1.0, weights: 6480]
(13) feedback_end		skipcat [size: 336, bias: 1.0, weights: 0]
(14) ARmodel_lstm_l1		lstm [size: 512, bias: 1.0, weights: 1740288]
(15) ARmodel_lstm_l2		lstm [size: 256, bias: 1.0, weights: 788224]
(16) ARmodel_outputnew		feedforward_identity [size: 80, bias: 1.0, weights: 20560]
(17) ARmodel_s1		skipini [size: 80, bias: 1.0, weights: 0]
(18) ARmodel_s2		skipadd [size: 80, bias: 1.0, weights: 0]
(19) ARmodel_modulate_post1		operator [size: 160, bias: 1.0, weights: 0]
(20) ARmodel_modulate_post2		gatedact [size: 80, bias: 1.0, weights: 0]
(21) ARmodel_cnn1		cnn [size: 80, bias: 1.0, weights: 32080]
(22) ARmodel_modulate_post3		operator [size: 160, bias: 1.0, weights: 0]
(23) ARmodel_modulate_post4		gatedact [size: 80, bias: 1.0, weights: 0]
(24) ARmodel_cnn2		cnn [size: 80, bias: 1.0, weights: 32080]
(25) ARmodel_modulate_post5		operator [size: 160, bias: 1.0, weights: 0]
(26) ARmodel_modulate_post6		gatedact [size: 80, bias: 1.0, weights: 0]
(27) ARmodel_cnn3		cnn [size: 80, bias: 1.0, weights: 32080]
(28) ARmodel_modulate_post7		operator [size: 160, bias: 1.0, weights: 0]
(29) ARmodel_modulate_post8		gatedact [size: 80, bias: 1.0, weights: 0]
(30) ARmodel_cnn4		cnn [size: 80, bias: 1.0, weights: 32080]
(31) ARmodel_modulate_post9		operator [size: 160, bias: 1.0, weights: 0]
(32) ARmodel_modulate_post10		gatedact [size: 80, bias: 1.0, weights: 0]
(33) ARmodel_cnn5		cnn [size: 80, bias: 1.0, weights: 32080]
(34) ARmodel_s3		skipadd [size: 80, bias: 1.0, weights: 0]
(35) postoutput		sse_multi [size: 80]
Total weights: 4900736


Creating the optimizer... 
 Optimization Techinique: Adam
Max training epochs:       50
Max epochs until new best: 5
Validation error every:    1
Test error every:          1
Learning rate:             0.001
Momentum:                  0

Initializing and training the model from scratch
Starting training...
Print error per sequence / per timestep / secondary error (optional)
 Epoch | Duration |           Training error         |           Validation error       |           Test error             |New best 
-------+----------+----------------------------------+----------------------------------+----------------------------------+---------
     1 |      1.2 |   18549.535 /    88.331/    0.000|   64115.895 /   149.803/    0.000|                                  |  yes ADAM
     2 |      0.8 |   17237.311 /    82.082/    0.000|   57360.305 /   134.019/    0.000|                                  |  yes ADAM
     3 |      0.8 |   14361.996 /    68.390/    0.000|   51995.203 /   121.484/    0.000|                                  |  yes ADAM
     4 |      0.8 |   12139.111 /    57.805/    0.000|   48544.656 /   113.422/    0.000|                                  |  yes ADAM
     5 |      0.8 |   10684.795 /    50.880/    0.000|   48324.309 /   112.907/    0.000|                                  |  yes ADAM
     6 |      0.8 |    9212.605 /    43.870/    0.000|   48305.906 /   112.864/    0.000|                                  |  yes ADAM
     7 |      0.8 |    7700.796 /    36.670/    0.000|   45649.898 /   106.659/    0.000|                                  |  yes ADAM
     8 |      0.8 |    6573.758 /    31.304/    0.000|   42623.297 /    99.587/    0.000|                                  |  yes ADAM
     9 |      0.8 |    5875.637 /    27.979/    0.000|   40784.055 /    95.290/    0.000|                                  |  yes ADAM
    10 |      0.8 |    5175.128 /    24.643/    0.000|   39833.594 /    93.069/    0.000|                                  |  yes ADAM
    11 |      0.8 |    4701.770 /    22.389/    0.000|   37359.000 /    87.287/    0.000|                                  |  yes ADAM
    12 |      0.8 |    4186.721 /    19.937/    0.000|   34804.992 /    81.320/    0.000|                                  |  yes ADAM
    13 |      0.8 |    3818.633 /    18.184/    0.000|   33155.422 /    77.466/    0.000|                                  |  yes ADAM
    14 |      0.8 |    3542.903 /    16.871/    0.000|   32351.812 /    75.588/    0.000|                                  |  yes ADAM
    15 |      0.8 |    3313.254 /    15.777/    0.000|   32441.949 /    75.799/    0.000|                                  |  no  ADAM
    16 |      0.8 |    2941.654 /    14.008/    0.000|   32437.914 /    75.790/    0.000|                                  |  no  ADAM
    17 |      0.8 |    2796.702 /    13.318/    0.000|   33005.367 /    77.115/    0.000|                                  |  no  ADAM
    18 |      0.8 |    2553.973 /    12.162/    0.000|   31737.477 /    74.153/    0.000|                                  |  yes ADAM
    19 |      0.8 |    2439.767 /    11.618/    0.000|   29764.418 /    69.543/    0.000|                                  |  yes ADAM
    20 |      0.8 |    2320.537 /    11.050/    0.000|   30450.373 /    71.146/    0.000|                                  |  no  ADAM
    21 |      0.8 |    2217.012 /    10.557/    0.000|   28445.357 /    66.461/    0.000|                                  |  yes ADAM
    22 |      0.8 |    2078.880 /     9.899/    0.000|   29709.180 /    69.414/    0.000|                                  |  no  ADAM
    23 |      0.8 |    2003.058 /     9.538/    0.000|   31065.445 /    72.583/    0.000|                                  |  no  ADAM
    24 |      0.8 |    1918.959 /     9.138/    0.000|   28694.910 /    67.044/    0.000|                                  |  no  ADAM
    25 |      0.8 |    1782.080 /     8.486/    0.000|   25829.523 /    60.349/    0.000|                                  |  yes ADAM
    26 |      0.8 |    1753.721 /     8.351/    0.000|   27925.688 /    65.247/    0.000|                                  |  no  ADAM
    27 |      0.8 |    1759.770 /     8.380/    0.000|   28401.762 /    66.359/    0.000|                                  |  no  ADAM
    28 |      0.8 |    1623.110 /     7.729/    0.000|   28144.492 /    65.758/    0.000|                                  |  no  ADAM
    29 |      0.8 |    1531.449 /     7.293/    0.000|   27639.688 /    64.579/    0.000|                                  |  no  ADAM
    30 |      0.8 |    1529.719 /     7.284/    0.000|   28640.453 /    66.917/    0.000|                                  |  no  Finished

No new lowest error since 5 epochs. Training stopped.
Lowest validation error: 25829.523438

Storing the trained network in 'trained_network.jsn'... done.
Removing cache file(s) ...
